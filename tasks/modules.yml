- block:
  - name: Install plugins without a specific version
    community.general.jenkins_plugin:
      url_username: admin
      url_password: "{{ jenkins_admin_pass }}"
      url: http://localhost:8080/jenkins
      name: "{{ item.key }}"
    register: my_jenkins_plugin_unversioned
    when: >
      'version' not in item.value
    with_dict: "{{ jenkins_plugins }}"

  - name: Install plugins with a specific version
    community.general.jenkins_plugin:
      url_username: admin
      url_password: "{{ jenkins_admin_pass }}"
      url: http://localhost:8080/jenkins
      name: "{{ item.key }}"
      version: "{{ item.value['version'] }}"
    register: my_jenkins_plugin_versioned
    when: >
      'version' in item.value
    with_dict: "{{ jenkins_plugins }}"

  - name: Initiate the fact
    ansible.builtin.set_fact:
      jenkins_restart_required: false

  - name: Check if restart is required by any of the versioned plugins
    ansible.builtin.set_fact:
      jenkins_restart_required: true
    when: item.changed
    with_items: "{{ my_jenkins_plugin_versioned.results }}"

  - name: Check if restart is required by any of the unversioned plugins
    ansible.builtin.set_fact:
      jenkins_restart_required: true
    when: item.changed
    with_items: "{{ my_jenkins_plugin_unversioned.results }}"

  - name: Restart Jenkins if required
    ansible.builtin.service:
      name: jenkins
      state: restarted
    when: jenkins_restart_required

  - name: Wait for Jenkins to start up
    ansible.builtin.uri:
      url: http://localhost:8080/jenkins
      status_code: [200, 403, 401, 301]
      timeout: 5
    register: jenkins_service_status
    # Keep trying for 5 mins in 5 sec intervals
    retries: 60
    delay: 5
    until: >
        'status' in jenkins_service_status and
        jenkins_service_status['status'] in [200, 403, 401, 301]
    when: jenkins_restart_required

  - name: Reset the fact
    ansible.builtin.set_fact:
      jenkins_restart_required: false
    when: jenkins_restart_required

  - name: Plugin pinning
    community.general.jenkins_plugin:
      url_username: admin
      url_password: "{{ jenkins_admin_pass }}"
      name: "{{ item.key }}"
      state: "{{ 'pinned' if item.value['pinned'] else 'unpinned'}}"
    when: >
      'pinned' in item.value
    with_dict: "{{ jenkins_plugins }}"

  - name: Plugin enabling
    community.general.jenkins_plugin:
      url_username: admin
      url_password: "{{ jenkins_admin_pass }}"
      name: "{{ item.key }}"
      state: "{{ 'enabled' if item.value['enabled'] else 'disabled'}}"
    when: >
      'enabled' in item.value
    with_dict: "{{ jenkins_plugins }}"

  tags:
    - modules